# Kubernetes app development
with Go, Skaffold and Kustomize
1 Jan 2021

Loh Siu Yin
Engineering Manager
siuyin@xendit.co

## Contents
- A "hello world" Go application / service.
- Configuration environment variables.
- Secret environment variables.
- Volume mounts to read/write files.
- Creating the app container image.
- Deployment to Kubernetes with Skaffold.
- Customisation to Staging, Production etc.
 environments with Kustomize.

## Hello World
cmd/hello/main.go:

.code cmd/hello/main.go  /^func main/,/^}/

Let's look at `displayFileContents`.

## displayFileContents

.code cmd/hello/main.go  /^func displayFileContents/,/^}/

Let's run our hello world service with its default configuration and secrets:
```
go run cmd/hello/main.go
```

## Configuration and Secrets

 .gitignore:

.code .gitignore

local.env:

.code local.env

local.secret.env:

.code local.secret.env

## Running hello service locally

Let's export the configuration and secrets files
into the environment.

Then run our service.
```
 . local.env
 . local.secret.env

go run cmd/hello/main.go
```

## Take a break: Check that you understand how to configure and run a service locally.

## Containerising our service

[![](https://mermaid.ink/img/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5kZihEb2NrZXJmaWxlKS0tPnxkb2NrZXIgYnVpbGQgLXQgbXlUYWdnZWRJbWFnZSAufGJ0KEJ1aWx0IGFuZCB0YWdnZWQgZG9ja2VyIGltYWdlKVxuYnQtLT58ZG9ja2VyIHJ1biAtLXJtIC1pdCAtUCBteVRhZ2dlZEltYWdlfHJ1bihDcmVhdGVkIGNvbnRhaW5lciBmcm9tIGltYWdlIGFuZCByYW4gaXQpIiwibWVybWFpZCI6e30sInVwZGF0ZUVkaXRvciI6ZmFsc2V9)](https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5kZihEb2NrZXJmaWxlKS0tPnxkb2NrZXIgYnVpbGQgLXQgbXlUYWdnZWRJbWFnZSAufGJ0KEJ1aWx0IGFuZCB0YWdnZWQgZG9ja2VyIGltYWdlKVxuYnQtLT58ZG9ja2VyIHJ1biAtLXJtIC1pdCAtUCBteVRhZ2dlZEltYWdlfHJ1bihDcmVhdGVkIGNvbnRhaW5lciBmcm9tIGltYWdlIGFuZCByYW4gaXQpIiwibWVybWFpZCI6e30sInVwZGF0ZUVkaXRvciI6ZmFsc2V9)

## Dockerfile
Dockerfile:

.code Dockerfile

## Building the docker image

Below, I am tagging my image "junk" because this is
a throw-away development image only used for
demo purposes.

Note the `.` in the command. This tells docker to look
for a Dockerfile in the current directory.

```
docker build -t junk .
```

## Running the docker image

```
docker run --rm -it -P junk
``` 

The:
1. --rm is to remove the container after the run ends.
1. -it: -i is to create an interactive session and -t to allocate a terminal.
1. -P is to allocate a port(s) on your local machine to connect to the docker instance's
 exposed port(s) running "inside" the docker environment.

## Testing the docker container instance

1. Determine which port was allocated on my local machine
 when a container was created from the "junk" image.
   ```
   docker ps | grep junk
   ```

1. Test the service. 192.168.1.68 is the IP of my local development machine.
   ```
   curl 192.168.1.68:{port}/
   ```

## Take a break: Check that you understand how to containerise an application.

## Kubernetes essentials

## Install kubernetes
Options:
1. Docker Desktop: See https://www.docker.com/products/kubernetes

1. kind (kubernetes in docker): See https://kubernetes.io/docs/tasks/tools/#kind

1. Minikube: See https://kubernetes.io/docs/tasks/tools/#minikube

1. microk8s: See https://microk8s.io/

## Install kubectl
kubectl controls your kubernetes cluster. Install it if your
kubernetes distribution does not already provide it.

Get it from: https://kubernetes.io/docs/tasks/tools/install-kubectl/

Check the connection to your kubernetes cluster:
```
$ kubectl cluster-info
Kubernetes master is running at https://192.168.1.68:16443
CoreDNS is running at https://192.168.1.68:16443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

$ kubectl get nodes
NAME   STATUS   ROLES    AGE    VERSION
ln02   Ready    <none>   223d   v1.20.0-37+7ab055a22f5440

## Simplified view of kubernetes

[![](https://mermaid.ink/img/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5rYihLdWJlcm5ldGVzIENvbnRyb2xsZXIpXG5rYyhrdWJlY3RsKVxua2MtLT58Y2FsbHMgQVBJfGtiXG5rYi0tPnN2KHNlcnZpY2UgY29udHJvbGxlcjpcXG5jb25maWd1cmVzIG5ldHdvcmtpbmcpXG5rYi0tPmRwKGRlcGxveW1lbnQgY29udHJvbGxlcilcbmRwPC0tPmtsKGt1YmVsZXQgb24gbm9kZSAxKVxuZHA8LS0-a2xuKGt1YmVsZXQgb24gbm9kZSBuKVxua2xuLS0-fGNyZWF0ZXMvZGVzdHJveXN8cGQocG9kcyBvbiBub2RlIG4pIiwibWVybWFpZCI6e30sInVwZGF0ZUVkaXRvciI6ZmFsc2V9)](https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZmxvd2NoYXJ0IFREXG5rYihLdWJlcm5ldGVzIENvbnRyb2xsZXIpXG5rYyhrdWJlY3RsKVxua2MtLT58Y2FsbHMgQVBJfGtiXG5rYi0tPnN2KHNlcnZpY2UgY29udHJvbGxlcjpcXG5jb25maWd1cmVzIG5ldHdvcmtpbmcpXG5rYi0tPmRwKGRlcGxveW1lbnQgY29udHJvbGxlcilcbmRwPC0tPmtsKGt1YmVsZXQgb24gbm9kZSAxKVxuZHA8LS0-a2xuKGt1YmVsZXQgb24gbm9kZSBuKVxua2xuLS0-fGNyZWF0ZXMvZGVzdHJveXN8cGQocG9kcyBvbiBub2RlIG4pIiwibWVybWFpZCI6e30sInVwZGF0ZUVkaXRvciI6ZmFsc2V9)

## Create a kubernetes service
A kubernetes service acts like a load-balancer to connect the outside
world to "pods" running inside kubernetes.

See [https://kubernetes.io/docs/concepts/services-networking/service/](https://kubernetes.io/docs/concepts/services-networking/service/)
for details.

## kube/hello-service.yaml:

.code kube/hello-service.yaml

Note the label key/value pair:
```
app: hello
```

We will use this label to "find" this service later.

## Ask kubernetes to create or update the service

`kubectl apply -f` will:
1. read the yaml file(s) and  

1. send it to the kubernetes controller

The kubernetes controller will then:
1. read the `declarations` in the file and
1. make the kubernetes environment match what was
 declared.
```
kubectl apply -f kube/hello-service.yaml
kubectl get services -l app=hello
```

Because of kubernetes declarative nature, `kubectl apply` is idempotent.
Try running it a second or third time.

## kubernetes service type: NodePort
When we run:
```
kubectl get services -l app=hello
```
we see the type to be NodePort.

There a several types of kubernetes services.

See [https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).

A NodePort service type means kubernetes will allocate a port on my local machine
(and on all nodes in the kubernetes cluster).

This port is connected to the service running inside kubernetes.

## kubernetes pods
A kubernetes pod is roughly equivalent to a docker container.

See [https://kubernetes.io/docs/concepts/workloads/pods/](https://kubernetes.io/docs/concepts/workloads/pods/)
for details.

Running an unmanaged pod directly on kubernetes is *not* recommended.
If a pod fails, kubernetes will not restart it.

## For educational purpose only: Create a kubernetes pod
For educational purposes *only*, I will create the hello service to
run as a pod in kubernetes.

kube/hello-pod.yaml:

.code kube/hello-pod.yaml

## pod: labels, image and resources

**labels**:
```
app: hello
```
The hello service uses this label to find the pod and connect to it.
The service is the "load-balancer" and the pod is the "backend".

**image**: tells kubernetes which image to use.
I first had to push the image to docker hub (or the image registry of your choice).
```
docker tag junk siuyin/junk
docker push siuyin/junk
```

**resources**: tells kubernetes the memory and CPU requirements
for running the pod.

## Testing the hello service on kubernetes

1. Ask kubernetes to create the pod
   ```
   kubectl apply -f kube/hello-pod.yaml
   kubectl get pods -l app=hello
   ```

1. Find the node port
   ```
   kubectl get svc -l app=hello
   ```

1. Test the hello-service
   ```
   curl 192.168.1.68:{node port}/
   ```

1. Delete the pod and retest.
   ```
   kubectl delete po --force
   curl 192.168.1.68:{node port}/
   ```

Kubernetes does *not* re-create a failed or terminated pod.

The kubernetes hello service will not have a backend pod
to connect to when the pod fails.

## Take a break: Check that you understand how kubernetes services and pods work.

## kubernetes deployments
When we deploy a pod directly into kubernetes, kubernetes does not re-create
or restart the pod if it fails.

A kubernetes deployment *will* re-create pods that fail.  
See [https://kubernetes.io/docs/concepts/workloads/controllers/deployment/](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)
for details.

This is the recommended way to deploy pods into kubernetes.

## kube/hello-deployment.yaml

.code kube/hello-deployment-basic.yaml

## deployment / label, spec selector and spec template
Let's ask kubernetes to run implement this deployment:
```
kubectl apply -f kube/hello-deployment-basic.yaml
kubectl get po -l app=hello
```
```
kubectl scale deploy hello --replicas=5
```

- The deployment label is to allow kubectl to find the deployment
   ```
   kubectl get deploy -l app=hello
   ```

- The deployment spec / selector works the same way as a service selector.

- A deployment selector looks for pods with matching labels
for the deployment to manage.

- Note that we do not need kube/hello-pod.yaml anymore.

- Instead we place the pod `template` into the deployment yaml itself.

## Configuration maps for deployments
See [https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/)
for details.

kube/hello-configmap.yaml:

.code kube/hello-configmap.yaml

Let's install this configuration map into kubernetes.
```
kubectl apply -f kube/hello-config.yaml
kubectl get configmap -l app=hello

## Secrets for deployments
A kubernetes secret is like your local.secret.env file.
It is *not* encrypted.
All kubernetes does is provide extra access restrictions
for kubernetes secrets.

See [https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)
for details.


kube/hello-secrt.yaml (purposely misspelled to avoid .gitignore):

.code kube/hello-secrt.yaml

Let's install this secret into kubernetes:
```
kubectl apply -f kube/hello-secrt.yaml
kubectl get secrets -l app=hello
```

## Deployment with configmap and secrets

kube/hello-deployment-env.yaml:

.code kube/hello-deployment-env.yaml /^ {4}spec/,/^ {6}termination/

Notice the envFrom section. This points to hello-config
and hello-secret.

## Test configured/customised deployment

1. Make sure the old basic deployment is deleted.
   ```
   kubectl delete deploy -l app=hello
   kubectl get deploy -l app=hello
   ```

1. Deploy our new deployment with env.
   ```
   kubectl apply -f kube/hello-deployment-env.yaml
   kubectl get deploy -l app=hello
   ```

1. Get node port and test service.
   ```
   kubectl get svc -l app=hello
   curl 192.168.1.68:{node port}/
   ```

## Take a break: Check that you understand how kubernetes configmaps and secrets work with deployments.

## Kubernetes volumes and volume mounts
A kubernetes volume is a piece of storage.
A volume mount is the location inside of a pod where that storage is mounted.

See [https://kubernetes.io/docs/concepts/storage/volumes/](https://kubernetes.io/docs/concepts/storage/volumes/)
for details.

Volume and volumeMounts are declared within a pod template of a deployment.

## kube/hello-deployment-vol.yaml

.code kube/hello-deployment-vol.yaml /^ {4}spec/,/^ {10}path/

`hostPath` volumes only work for single-node clusters like my development cluster.

In production we would use awsElasticBlockStore or gcePersistentDisk volumes.

## Test deployment with volume mounted

1. Make sure the old deployment is deleted.
   ```
   kubectl delete deploy -l app=hello
   kubectl get deploy -l app=hello
   ```

1. Deploy our new deployment with volume mounts.
   ```
   kubectl apply -f kube/hello-deployment-vol.yaml
   kubectl get deploy -l app=hello
   ```

1. Get node port and test service.
   ```
   kubectl get svc -l app=hello
   curl 192.168.1.68:{node port}/
   ```

 1. Change the contents of the /home/siuyin/testdata/myfile.txt and re-test.

## Development process summarised
1. Write the hello world service code.
1. Create, tag and push a Docker image into an image registry.
1. Create a kubernetes service to act like a load-balancer between
 the outside world and kubernetes pods.
1. Create and apply kubernetes configMap(s) and/or secret(s).
1. Create and apply a kubernetes deployment which
 references:
   1. configMap(s)
   1. secret(s)
   1. volume(s) and volumeMount(s)

## Take a break: Congratulate yourself, you have covered kubernetes 101!

## Reality check: Production requirements

1. The docker images must be tagged with something meaningful
 and not siuyin/junk. Eg. siuyin/myapp:1.0.3
 or siuyin/myapp:6daef3ab (git commit tag).

1. Our deployment names should be something like
 hello-dev, hello-staging, hello-prod instead of just hello
 to reflect the different environments.

1. We must have a systematic, sustainable
 way of customising our configMaps,
 secrets, volumes and volumeMounts to accommodate
 staging, prod etc. environments.

Skaffold is a tool I use to address concern 1.

Kustomize is my preferred tool to address concerns 2 and 3.


## Presentation and code download

.link https://github.com/siuyin/present-kubernetes-app-dev-go-skaffold-kustomize
